const Koa = require("koa");
const Router = require("koa-router");
const mongoose = require("mongoose");
const multer = require("@koa/multer");
const path = require("path");
const cors = require("@koa/cors");
const serve = require("koa-static");
const koaBody = require("koa-body");
const fs = require("fs"); // Add this line

const app = new Koa();
const router = new Router();

app.use(cors());
app.use(serve("C:/ecommerce2/server/Images/Products"));
app.use(serve("C:/ecommerce2/server/Images/Blogs")); // Add this line
app.use(koaBody());

mongoose.connect("mongodb://127.0.0.1:27017/ecommerce2", {});

const customerSchema = new mongoose.Schema({
  name: String,
  email: String,
  phoneNumber: String,
  address: String,
  // Add any other fields you need for a customer
});

const Customer = mongoose.model("Customer", customerSchema);
// Get all customers
router.get("/api/customers", async (ctx) => {
  const customers = await Customer.find();
  ctx.body = customers;
});

router.post("/api/customers", async (ctx) => {
  try {
    const customerData = ctx.request.body;
    const newCustomer = new Customer(customerData);
    const savedCustomer = await newCustomer.save();
    ctx.status = 200;
    ctx.body = savedCustomer;
  } catch (error) {
    console.error("Error creating customer:", error);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while creating the customer" };
  }
});


// Update a customer
router.put("/api/customers/:id", async (ctx) => {
  // Your logic for updating a customer and syncing with Google Contacts
});

// Delete a customer
router.delete("/api/customers/:id", async (ctx) => {
  // Your logic for deleting a customer and syncing with Google Contacts
});

const productSchema = new mongoose.Schema({
  name: String,
  model: String,
  brand: String,
  location: String,
  year: Number,
  exposureCounter: Number,
  price: Number,
  description: String,
  imageUrl: String,
});

const Product = mongoose.model("Product", productSchema);

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "C:/ecommerce2/server/Images/Products");
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10 MB
    fieldSize: 10 * 1024 * 1024 // 2MB for fields
  },
});


router.get("/api/products", async (ctx) => {
  console.log("Received request for /api/products");
  const products = await Product.find();
  ctx.body = products;
});

router.post("/api/products", upload.single("image"), async (ctx) => {
  try {
    console.log("Received request to create a product");

    // log the request body
    console.log(ctx.request.body);

    // get the product data and parse it as JSON
    const productData = JSON.parse(ctx.request.body.data);

    const image = ctx.request.file;

    if (!image) {
      console.log("No image file found in request");
      ctx.status = 400;
      ctx.body = { error: "Image file is required" };
      return;
    }

    const imageUrl = `${image.filename}`;

    const product = await Product.create({
      name: productData.name,
      model: productData.model,
      brand: productData.brand, 
      location: productData.location,   
      year: productData.year,
      exposureCounter: productData.exposureCounter,
      price: productData.price,
      description: productData.description,
      imageUrl: imageUrl,
     
    });

    ctx.body = product;
  } catch (err) {
    if (err instanceof multer.MulterError) {
      console.error('Multer error:', err);
      ctx.status = 400;
      ctx.body = { error: "File size too large. Maximum allowed is 2 MB" };
    } else {
      console.error('General error:', err);
      ctx.status = 500;
      ctx.body = { error: "An error occurred while uploading the file" };
    }
  }
});

router.put("/api/products/:id", upload.single("image"), async (ctx) => {
  try {
    const id = ctx.params.id;
    const productData = JSON.parse(ctx.request.body.data);
    const image = ctx.request.file;

    const updateObj = {
      name: productData.name,
      model: productData.model,
      brand: productData.brand, 
      location: productData.location,   
      year: productData.year,
      exposureCounter: productData.exposureCounter,
      price: productData.price,
      description: productData.description,
    };

    if (image) {
      const imageUrl = `${image.filename}`;
      updateObj["imageUrl"] = imageUrl;
    }

    const updatedProduct = await Product.findByIdAndUpdate(id, updateObj, {
      new: true,
    });

    ctx.body = updatedProduct;
  } catch (err) {
    console.error("Error updating product:", err);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while updating the product" };
  }
});

router.delete("/api/products/:id", async (ctx) => {
  try {
    const id = ctx.params.id;

    // Find the product by id
    const product = await Product.findById(id);

    if (!product) {
      ctx.status = 404;
      ctx.body = { error: "Product not found" };
      return;
    }

    // Delete the associated image file
    const imagePath = path.join(__dirname, "Images", "Products", product.imageUrl);
    fs.unlink(imagePath, (err) => {
      if (err) {
        console.error("Error deleting image file:", err);
        ctx.status = 500;
        ctx.body = { error: "An error occurred while deleting the image file" };
        return;
      }

      // Delete the product from the database
      Product.findByIdAndDelete(id)
        .then(() => {
          ctx.body = { message: "Product deleted successfully", deletedProduct: product };
        })
        .catch((error) => {
          console.error("Error deleting product:", error);
          ctx.status = 500;
          ctx.body = { error: "An error occurred while deleting the product" };
        });
    });
  } catch (error) {
    console.error("Error deleting product:", error);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while deleting the product" };
  }
});

// Blog related routes

const blogSchema = new mongoose.Schema({
  title: String,
  content: String,
  imageUrl: String,
  tags: [String],
});


const Blog = mongoose.model("Blog", blogSchema);

const blogStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    const dir = "C:/ecommerce2/server/Images/Blogs";
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const blogUpload = multer({
  storage: blogStorage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10 MB
    fieldSize: 2 * 1024 * 1024 // 2MB for fields
  },
});

router.get("/api/blogs", async (ctx) => {
console.log("Received request for /api/blogs");
const blogs = await Blog.find();
ctx.body = blogs;
});


router.post("/api/blogs", blogUpload.single("image"), async (ctx) => {
  try {
    console.log("Received request to create a blog");

    // log the request body
    console.log(ctx.request.body);

    let blogData;

    // Check if ctx.request.body.data is defined
    if (ctx.request.body.data) {
      // get the blog data and parse it as JSON
      blogData = JSON.parse(ctx.request.body.data);
    } else {
      blogData = ctx.request.body;
    }

    const image = ctx.request.file;

    if (!image) {
      try {
        console.log("No image file found in request");
        ctx.status = 400;
        ctx.body = { error: "Image file is required" };
      } catch (err) {
        console.error('Error handling missing image:', err);
        ctx.status = 500;
        ctx.body = { error: "An error occurred while processing the request" };
      }
      return;
    }

    const imageUrl = `${image.filename}`;

    const blog = await Blog.create({
      title: blogData.title,
      content: blogData.content,
      imageUrl: imageUrl,
      tags: blogData.tags,
    });

    ctx.status = 200;
    ctx.body = blog;
    console.log("Response:", ctx.status, ctx.body);

  } catch (err) {
    console.error('General error:', err);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while uploading the file" };
  }
});


router.put("/api/blogs/:id", blogUpload.single("image"), async (ctx) => {


  try {
    const id = ctx.params.id;

    let blogData;

    // Check if ctx.request.body.data is defined
    if (ctx.request.body.data) {
      // get the blog data and parse it as JSON
      blogData = JSON.parse(ctx.request.body.data);
    } else {
      blogData = ctx.request.body;
    }

    const image = ctx.request.file;
   const updateObj = {
  title: blogData.title,
  content: blogData.content,
  tags: blogData.tags,
};


    if (image) {
     const imageUrl = `${image.filename}`;

      updateObj["imageUrl"] = imageUrl;
    }

    const updatedBlog = await Blog.findByIdAndUpdate(id, updateObj, {
      new: true,
    });

    ctx.body = updatedBlog;
  } catch (err) {
    console.error("Error updating blog:", err);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while updating the blog" };
  }
});


router.delete("/api/blogs/:id", async (ctx) => {
  try {
    const id = ctx.params.id;

    // Find the blog by id
    const blog = await Blog.findById(id);

    if (!blog) {
      ctx.status = 404;
      ctx.body = { error: "Blog not found" };
      return;
    }

    // Delete the associated image file
    const imagePath = path.join(__dirname, "Images", "Blogs", blog.imageUrl);
    fs.unlink(imagePath, async (err) => {
      if (err) {
        console.error("Error deleting image file:", err);
        ctx.status = 500;
        ctx.body = { error: "An error occurred while deleting the image file" };
        return;
      }

      try {
        // Delete the blog from the database
        const deletedBlog = await Blog.findByIdAndDelete(id);
        ctx.body = { message: "Blog deleted successfully", deletedBlog };
      } catch (error) {
        console.error("Error deleting blog:", error);
        ctx.status = 500;
        ctx.body = { error: "An error occurred while deleting the blog" };
      }
    });
  } catch (error) {
    console.error("Error deleting blog:", error);
    ctx.status = 500;
    ctx.body = { error: "An error occurred while deleting the blog" };
  }
});

app.use(router.routes()).use(router.allowedMethods());

app.listen(4000, function () {
  console.log("Koa server is listening on port 4000");
});

= 
export const baseURL = 'http://127.0.0.1:4000/api/products';

export const fetchProducts = async () => {
  try {
    console.log('Fetching products...');
    const response = await fetch(baseURL, { method: 'GET' });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const products = await response.json();
    console.log('Fetched products:', products);
    return products;
  } catch (error) {
    console.error('Error fetching products:', error);
    throw error;
  }
};

export const createProduct = async (productFormData: FormData) => {
  try {
    console.log('Creating product...');

    console.log('FormData:', [...productFormData.entries()]); // Log form data

    const response = await fetch(baseURL, {
      method: 'POST',
      body: productFormData,
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const createdProduct = await response.json();
    console.log('Created product:', createdProduct);
    return createdProduct;
  } catch (error) {
    console.error('Error creating product:', error);
    throw error;
  }
};



export const updateProduct = async (id, product, image) => {
  try {
    console.log('Updating product...');
    const formData = new FormData();
    formData.append('name', product.name);
    formData.append('model', product.model);
    formData.append('brand', product.brand);
    formData.append('location', product.location);
    formData.append('year', product.year.toString());
    formData.append('exposureCounter', product.exposureCounter.toString());
    formData.append('price', product.price.toString());
    formData.append('description', product.description);

    console.log('Image file:', image);
if (image) {
    formData.append('file', image, image.name);
  }

  // If no new image is provided, still pass the old image url and path
  else {
    formData.append('imageUrl', product.imageUrl);
    formData.append('imagePath', product.imagePath);
  }

  const response = await fetch(`${baseURL}/${id}`, {
    method: 'PUT',
    body: formData,
  });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const updatedProduct = await response.json();
    console.log('Updated product:', updatedProduct);
    return updatedProduct;
  } catch (error) {
    console.error('Error updating product:', error);
    throw error;
  }
};

export const deleteProduct = async (productId) => {
  try {
    console.log('Deleting product...');
    const response = await fetch(`http://127.0.0.1:4000/api/products/${productId}`, {
      method: 'DELETE',
    });

    if (response.status === 404) {
      throw new Error(`Product with ID ${productId} not found`);
    }

    if (!response.ok) {
      const errorMessage = await response.text();
      throw new Error(`Delete request failed with status ${response.status}: ${errorMessage}`);
    }

    console.log('Product deleted:', productId);
    // Add image deletion after the product deletion is successful
    deleteImage(productId);
    return response;
  } catch (error) {
    console.error('Error deleting product:', error);
    throw error;
  }
};

export const deleteImage = async (folderPath) => {
  try {
    console.log('Deleting image...');
    const response = await fetch(`http://127.0.0.1:4000/api/images/${folderPath}`, {
      method: 'DELETE',
    });
 
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const deletedImage = await response.json();
    console.log('Deleted image:', deletedImage);
    return deletedImage;
  } catch (error) {
    console.error('Error deleting image:', error);
    // No need to throw the error here
  }
};

console.log('All functions imported successfully.');


