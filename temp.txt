// multer diskStorage for product images
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const tmpDir = `C:/ecommerce2/server/Images/Products/tmp`;
    cb(null, tmpDir);
  },
  filename: function (req, file, cb) {
    const { model, location, year, exposureCounter } = req.body;
    const currentDate = new Date();
    const hours = String(currentDate.getHours()).padStart(2, '0');
    const minutes = String(currentDate.getMinutes()).padStart(2, '0');
    const seconds = String(currentDate.getSeconds()).padStart(2, '0');
    const timestamp = `${hours}-${minutes}-${seconds}`;

    // Create the new filename
    const newFileName = `${model}-${year}-${location}-${exposureCounter}-${timestamp}.${file.originalname.split('.').pop()}`;

    cb(null, newFileName);
  },
});

const upload = multer({ storage: storage });

router.post('/upload', upload.array('file'), (req, res) => {
  const { model, location, year, price, name } = req.body;
  const currentDate = new Date();
  const day = String(currentDate.getDate()).padStart(2, '0');
  const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Months are zero-based
  const year2 = currentDate.getFullYear();
  const hours = String(currentDate.getHours()).padStart(2, '0');
  const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  const seconds = String(currentDate.getSeconds()).padStart(2, '0');
  const timestamp = `${day}-${month}-${year2}-${hours}-${minutes}-${seconds}`;
  const newFolderName = `C:/ecommerce2/server/Images/Products/${name}-${model}-${location}-${year}-${price}-${timestamp}`;

  if (!fs.existsSync(newFolderName)) {
    fs.mkdirSync(newFolderName, { recursive: true });
  }

  req.files.forEach(file => {
    const tempPath = file.path;
    const targetPath = path.join(newFolderName, file.filename);
    
    fs.rename(tempPath, targetPath, err => {
      if (err) return res.status(500).send(err);
    });
  });

  res.send('Files moved successfully');
});

app.use(serve("C:/ecommerce2/server/Images/Blogs"));

app.use(cors());

mongoose.connect("mongodb://127.0.0.1:27017/ecommerce2", {});

module.exports.createProduct = async (product, image) => {
  try {
    const date = new Date();
    const year = date.getFullYear();
    const { model, location, price } = product;
    const folderName = `${model}-${location}-${year}-${price}-${timestamp}`;

    console.log("Creating product...");
    console.log("Folder Name:", folderName);

    // Create folder if it doesn't exist
    const response = await fetch(`${baseURL}/create-folder/${folderName}`, {
      method: "POST",
    });

    if (!response.ok) {
      throw new Error("Error creating folder");
    }

    console.log("Folder created:", folderName);

    // Prepare the form data
    const formData = new FormData();
    formData.append("data", JSON.stringify(product));
    
    if (image) {
      // Append image to form data with filename :image.jpg
      formData.append("image", image, `image.jpg`);

      // Upload image to server
      const uploadResponse = await fetch(
        `${baseURL}/upload-image/${folderName}`,
        {
          method: "POST",
          body: formData,
        }
      );

      if (!uploadResponse.ok) {
        throw new Error("Error uploading image");
      }

      console.log("Image uploaded successfully");
    }

    const createProductResponse = await fetch(`${baseURL}/add-product`, {
      method: "POST",
      body: formData,
    });

    if (!createProductResponse.ok) {
      throw new Error("Network response was not ok");
    }

    const createdProduct = await createProductResponse.json();
    console.log("Product created:", createdProduct);
    return createdProduct;
  } catch (error) {
    console.error("Error creating product:", error);
    throw error;
  }
};

// Product related routes

const productSchema = new mongoose.Schema({
  name: String,
  model: String,
  brand: String,
  description: String,
  location: String,
  year: Number,
  exposureCounter: Number,
  price: Number,
  imageUrl: String,
  imagePath: String,
});

